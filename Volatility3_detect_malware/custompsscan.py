from volatility3.plugins.windows import poolscanner
from volatility3.framework.objects import utility
from volatility3.framework import interfaces
from volatility3.framework.configuration import requirements
from volatility3.framework import renderers
from volatility3.framework import exceptions
from volatility3.framework.automagic import symbol_cache, symbol_finder
import logging
from volatility3.framework import constants

vollog = logging.getLogger(__name__)

class CustomPsScan(interfaces.plugins.PluginInterface):
    """비페이징 풀만 스캔하여 최적화된 제약 조건을 사용하여 프로세스를 찾습니다."""

    _required_framework_version = (2, 0, 0)

    @classmethod
    def get_requirements(cls):
        return [
            requirements.TranslationLayerRequirement(
                name='primary',
                description='커널의 메모리 레이어',
                architectures=['Intel32', 'Intel64']
            ),
            requirements.SymbolTableRequirement(
                name='nt_symbols',
                description='Windows 커널 심볼'
            )
        ]

    def _get_nonpaged_pool_bounds(self, layer_name, nt_symbols):
        """비페이징 풀의 경계를 가져옵니다."""
        kernel = self.context.layers[layer_name]
        symbol_table = self.context.symbol_space[nt_symbols]

        methods = [
            {"name": "MmNonPagedPoolStart와 MmNonPagedPoolEnd", "start": "MmNonPagedPoolStart", "end": "MmNonPagedPoolEnd"},
            {"name": "MiVisibleState", "start": "MiVisibleState.NonPagedPoolFirstVa", "end": "MiVisibleState.NonPagedPoolLastVa"},
            {"name": "MiState", "start": "MiState.NonPagedPoolStart", "end": "MiState.NonPagedPoolEnd"},
            {"name": "NonPagedPoolDescriptor", "start": "NonPagedPoolDescriptor.PoolStart", "end": "NonPagedPoolDescriptor.PoolEnd"}
        ]

        for method in methods:
            try:
                if "." in method["start"]:
                    base_symbol, attr = method["start"].split('.')
                    base_obj = self.context.object(
                        nt_symbols + constants.BANG + base_symbol,
                        layer_name=layer_name,
                        offset=symbol_table.get_symbol(base_symbol).address
                    )
                    nonpaged_pool_start = getattr(base_obj, attr)
                else:
                    nonpaged_pool_start = self.context.object(
                        nt_symbols + constants.BANG + "pointer",
                        layer_name=layer_name,
                        offset=symbol_table.get_symbol(method["start"]).address
                    )

                if "." in method["end"]:
                    base_symbol, attr = method["end"].split('.')
                    base_obj = self.context.object(
                        nt_symbols + constants.BANG + base_symbol,
                        layer_name=layer_name,
                        offset=symbol_table.get_symbol(base_symbol).address
                    )
                    nonpaged_pool_end = getattr(base_obj, attr)
                else:
                    nonpaged_pool_end = self.context.object(
                        nt_symbols + constants.BANG + "pointer",
                        layer_name=layer_name,
                        offset=symbol_table.get_symbol(method["end"]).address
                    )

                vollog.info(f"{method['name']} 메서드를 사용하여 비페이징 풀 경계를 성공적으로 찾았습니다.")
                return int(nonpaged_pool_start), int(nonpaged_pool_end)

            except exceptions.SymbolError as e:
                vollog.error(f"{method['name']}의 심볼을 찾을 수 없습니다: {e}")
            except AttributeError as e:
                vollog.error(f"{method['name']}에서 예상된 속성을 찾을 수 없습니다: {e}")
            except Exception as e:
                vollog.error(f"{method['name']} 메서드를 시도하는 동안 예상치 못한 오류가 발생했습니다: {e}")

        vollog.error("모든 메서드를 사용해도 비페이징 풀 경계를 결정할 수 없습니다.")
        return None, None

    def _generator(self):
        layer_name = self.config['primary']
        nt_symbols = self.config['nt_symbols']

        nonpaged_pool_start, nonpaged_pool_end = self._get_nonpaged_pool_bounds(layer_name, nt_symbols)
        if nonpaged_pool_start is None or nonpaged_pool_end is None:
            vollog.error("비페이징 풀 경계를 결정할 수 없습니다.")
            return

        vollog.debug(f"비페이징 풀 시작: {nonpaged_pool_start:#x}, 끝: {nonpaged_pool_end:#x}")

        # EPROCESS 풀 헤더의 시그니처를 사용하여 빠른 스캔 제약 조건을 정의합니다.
        constraints = poolscanner.PoolScanner.builtin_constraints(
            nt_symbols, [b"Pro\xe3", b"Proc"]
        )

        vollog.debug(f"제약 조건: {constraints}")

        # 지정된 제약 조건으로 풀 스캐너를 사용하여 스캔합니다.
        for result in poolscanner.PoolScanner.generate_pool_scan(
            context=self.context,
            layer_name=layer_name,
            symbol_table=nt_symbols,
            constraints=constraints,
            start=nonpaged_pool_start,
            end=nonpaged_pool_end
        ):
            _constraint, obj, _header = result
            vollog.debug(f"객체를 찾았습니다: {obj}")

            try:
                pool_header = obj.cast('_POOL_HEADER')
                pool_type = pool_header.PoolType
                if pool_type == 0:  # 비페이징 풀
                    pid = obj.UniqueProcessId
                    image_file_name = utility.array_to_string(obj.ImageFileName)
                    vollog.debug(f"PID: {pid}, 이미지 파일 이름: {image_file_name}")
                    yield (0, (pid, image_file_name))
                else:
                    vollog.debug(f"PoolType이 {pool_type}인 객체를 건너뜁니다: {obj}")
            except AttributeError as e:
                vollog.debug(f"유효한 PoolType 헤더가 없는 객체입니다: {obj}, 오류: {str(e)}")

    def run(self):
        # 자동 심볼 다운로드를 위한 SymbolFinder 초기화
        symbol_finder.SymbolFinder(self.context, self.config_path)(self.context, self.config_path, self)

        return renderers.TreeGrid(
            [("PID", int), ("ImageFileName", str)],
            self._generator()
        )

